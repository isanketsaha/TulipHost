# ===================================================================
# Spring Boot configuration for the "dev" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
#    org:
#      springframework:
#        statemachine: DEBUG
#        hibernate:
#          type:
#            descriptor:
#              sql: trace
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error
    ROOT: INFO
    tech.jhipster: INFO
    org.hibernate.SQL: INFO
    com.tulip.host: DEBUG

eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://admin:${jhipster.registry.password}@localhost:8761/eureka/

management:
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # report 100% of traces

spring:
#  jpa:
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true
  devtools:
    restart:
      enabled: true
      additional-exclude: static/**
    livereload:
      enabled: false # we use Webpack dev server + BrowserSync for livereload
  jackson:
    serialization:
      indent-output: true
  cloud:
    loadbalancer:
      cache:
        enabled: false
    config:
      uri: http://admin:${jhipster.registry.password}@localhost:8761/config
      # name of the config server's property source (file.yml) that we want to use
      name: tulipHost
      profile: dev
      label: main # toggle to switch to a different version of the configuration as stored in git
      # it can be set to any label, branch or commit of the configuration source Git repository
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://localhost:2306/tulip?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
    username: root
    password: Rakhi@06
    hikari:
      poolName: TulipHikariPool
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000 # 5 minutes
      max-lifetime: 1200000 # 20 minutes
      connection-timeout: 20000 # 20 seconds
      leak-detection-threshold: 60000 # 1 minute
      auto-commit: false
      connection-test-query: SELECT 1
      validation-timeout: 5000 # 5 seconds
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
        useLocalTransactionState: true
        useUnbufferedInput: false
        useReadAheadInput: false
        tcpKeepAlive: true
        useFastDateParsing: false
        useTimezone: false
        useLegacyDatetimeCode: false
        zeroDateTimeBehavior: convertToNull
        characterEncoding: utf8
        characterSetResults: utf8
        connectionTimeZone: SERVER
        forceConnectionTimeZoneToSession: true
  jpa:
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          batch_size: 50
          batch_versioned_data: true
          use_get_generated_keys: true
          use_scrollable_resultset: false
          wrap_result_sets: false
          time_zone: UTC
        connection:
          provider_disables_autocommit: true
          release_mode: after_transaction
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
        cache:
          use_second_level_cache: false
          use_query_cache: false
        order_inserts: true
        order_updates: true
        query:
          fail_on_pagination_over_collection_fetch: true
          in_clause_parameter_padding: true
        session:
          events:
            log: false
            log.LOG_QUERIES_SLOWER_THAN_MS: 1000
        generate_statistics: false
        timezone:
          default_storage: NORMALIZE
        type:
          preferred_instant_jdbc_type: TIMESTAMP
        id:
          new_generator_mappings: true
        naming:
          physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
          implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    hibernate:
      ddl-auto: none
  liquibase:
    # Remove 'faker' if you do not want the sample data to be loaded automatically
    contexts: dev, faker
  messages:
    cache-duration: PT1S # 1 second, see the ISO 8601 standard
  thymeleaf:
    cache: false

server:
  port: 8081

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  registry:
    password: admin
  # CORS is disabled by default on microservices, as you should access them through a gateway.
  # If you want to enable it, please uncomment the configuration below.
  cors:
    allowed-origins: 'http://localhost:5173'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count'
    allow-credentials: true
    max-age: 1800
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        base64-secret: geT1M2OU6Qyw3Giv4/pc1KF3Ei/d3XM9PaA3YRp7Bo5eAFgEv0KBPW0ntjVpQGE4TyT9qPIm8KPp7SmZht5N+qxgXCf1UZEb+nkG6jp+0NwV9fny1rzxEOXFch572ar7khtBhCYIwFnpqKv9/msmeXqBOX44S6PWMXCGmN8/j4bdnK/7nFDrswwEc5YN0SsOUrUTPkzJzOx+VFKKl4m5rbT84/6OomuPzmSrajHP7L4Q25E6b1XV0na0QvrfUstdCXThtd8vDDRGkGWN3jsqWgQAxTRTw+MDJl8pQqDLtunrdL2SNbndljsAmH2FiSo+aouyjTur5hei4zAk9OTxpw==
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      ring-buffer-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  aws:
    region:
      value: ${s3.region}
    credential:
      accessKey: ${s3.key}
      secret: ${s3.secret}
      bucket-name: ${s3.bucket}
  # Custom logging thresholds (used in code)
  slow-query-threshold-ms: 1000
  slow-method-threshold-ms: 1000
