# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: WARN
    tech.jhipster: WARN
    com.tulip.host: INFO
    # Minimal logging for different layers - only errors and important events
    com.tulip.host.web.rest: WARN
    com.tulip.host.service: WARN
    com.tulip.host.repository: WARN
    com.tulip.host.security: INFO
    com.tulip.host.web.rest.errors: INFO
    # Performance monitoring - only slow queries
    org.hibernate.SQL: ERROR
    org.hibernate.type.descriptor.sql.BasicBinder: ERROR
    # Security logging - only failures
    org.springframework.security: WARN
    # Database connection logging - only errors
    com.zaxxer.hikari: ERROR
    # HTTP request logging - only errors
    org.springframework.web: WARN
    # Cache logging - only errors
    org.springframework.cache: ERROR
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://admin:${jhipster.registry.password}@localhost:8761/eureka/

management:
  prometheus:
    metrics:
      export:
        enabled: true
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # report 100% of traces
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    tags:
      application: ${spring.application.name}
      environment: prod

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  cloud:
    config:
      retry:
        initial-interval: 1000
        max-interval: 2000
        max-attempts: 100
      uri: http://admin:${jhipster.registry.password}@localhost:8761/config
      # name of the config server's property source (file.yml) that we want to use
      name: tulipHost
      profile: prod
      label: main # toggle to switch to a different version of the configuration as stored in git
      # it can be set to any label, branch or commit of the configuration source Git repository
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://${MYSQLUSER}:${MYSQLPASSWORD}@${MYSQLHOST}:${MYSQLPORT}/tulip?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true&rewriteBatchedStatements=true&cachePrepStmts=true&useServerPrepStmts=true&maintainTimeStats=false&elideSetAutoCommits=true&useLocalSessionState=true&cacheResultSetMetadata=true&cacheServerConfiguration=true&useLocalTransactionState=true&nullCatalogMeansCurrent=true&readOnlyPropagatesToServer=false&useUnbufferedInput=false&useReadAheadInput=false&tcpKeepAlive=true&useFastDateParsing=false&useTimezone=false&useLegacyDatetimeCode=false&zeroDateTimeBehavior=convertToNull&characterEncoding=utf8&characterSetResults=utf8&connectionTimeZone=SERVER&forceConnectionTimeZoneToSession=true
    username: root
    password:
    hikari:
      poolName: TulipHikariPool
      maximum-pool-size: 30
      minimum-idle: 10
      idle-timeout: 300000 # 5 minutes
      max-lifetime: 1200000 # 20 minutes
      connection-timeout: 20000 # 20 seconds
      leak-detection-threshold: 60000 # 1 minute
      auto-commit: false
      connection-test-query: SELECT 1
      validation-timeout: 5000 # 5 seconds
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
        useLocalTransactionState: true
        useUnbufferedInput: false
        useReadAheadInput: false
        tcpKeepAlive: true
        useFastDateParsing: false
        useTimezone: false
        useLegacyDatetimeCode: false
        zeroDateTimeBehavior: convertToNull
        characterEncoding: utf8
        characterSetResults: utf8
        connectionTimeZone: SERVER
        forceConnectionTimeZoneToSession: true
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias tuliphost -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# See details in topic "Create a Java Keystore (.JKS) from Let's Encrypt Certificates" on https://maximilian-boehm.com/en-gb/blog
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8081
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  registry:
    password: admin
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: ${JKS_SECRET}
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  logging:
    use-json-format: true # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: true
      host: localhost
      port: 5000
      ring-buffer-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  aws:
    region:
      value: ${s3.region}
    credential:
      accessKey: ${s3.key}
      secret: ${s3.secret}
      bucket-name: ${s3.bucket}

jpa:
  open-in-view: false
  properties:
    hibernate:
      jdbc:
        batch_size: 50
        batch_versioned_data: true
        use_get_generated_keys: true
        use_scrollable_resultset: false
        wrap_result_sets: false
        time_zone: UTC
      connection:
        provider_disables_autocommit: true
        release_mode: after_transaction
        handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
      cache:
        use_second_level_cache: false
        use_query_cache: false
      order_inserts: true
      order_updates: true
      query:
        fail_on_pagination_over_collection_fetch: true
        in_clause_parameter_padding: true
      session:
        events:
          log: false
          log.LOG_QUERIES_SLOWER_THAN_MS: 1000
      generate_statistics: false
      timezone:
        default_storage: NORMALIZE
      type:
        preferred_instant_jdbc_type: TIMESTAMP
      id:
        new_generator_mappings: true
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  hibernate:
    ddl-auto: none
